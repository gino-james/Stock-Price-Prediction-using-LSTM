# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UjoOz_5S7_WbAwcGTpZvftVm31KVJXP6
"""
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import joblib
import tensorflow as tf
from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler

# Set Streamlit page configuration
st.set_page_config(page_title="Stock Price Prediction", page_icon="ðŸ“ˆ", layout="centered")

# Title and description
st.title("ðŸ“ˆ Stock Price Prediction using LSTM")
st.markdown(
    "This tool predicts future stock prices using an LSTM model trained on historical data. "
    "Enter the required details below to get a prediction."
)

# Sidebar for user input
st.sidebar.header("Select Date Range")
start_date = st.sidebar.date_input("Select Start Date")
end_date = st.sidebar.date_input("Select End Date")

# Load Data
def load_data():
    try:
        df = pd.read_csv("AAPL.csv")  # Ensure correct file path
        df['Date'] = pd.to_datetime(df['Date'])
        df.set_index('Date', inplace=True)
        return df
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame()

df = load_data()

# Load LSTM model and scaler
try:
    model = load_model("lstm_stock_model.h5")  # Ensure the correct path
    scaler = joblib.load("scaler.pkl")  # Load the same scaler used for training
except Exception as e:
    st.error(f"Error loading model or scaler: {e}")
    model, scaler = None, None

# Filter Data based on user input
if df.empty:
    st.error("No data found. Please check the file path or data format.")
elif model is None or scaler is None:
    st.error("Model or scaler not available. Please check the file paths.")
else:
    df_filtered = df.loc[start_date:end_date]

    if df_filtered.empty:
        st.error("No data available for the selected date range. Please choose a different range.")
    elif 'Close' not in df_filtered.columns:
        st.error("Missing 'Close' column in the dataset. Check the CSV file format.")
    else:
        # Prepare input data for prediction
        input_data = df_filtered[['Close']].values
        input_data_scaled = scaler.transform(input_data)
        input_data_scaled = np.reshape(input_data_scaled, (input_data_scaled.shape[0], 1, input_data_scaled.shape[1]))

        # Prediction button
        if st.sidebar.button("Predict"):
            try:
                predictions = model.predict(input_data_scaled)
                predicted_prices = scaler.inverse_transform(np.concatenate((predictions, np.zeros((len(predictions), 1))), axis=1))[:, 0]
                
                st.markdown(
                    f"<h2 style='text-align: center; color: #4CAF50;'>Predicted Stock Price: ${predicted_prices[-1]:.2f}</h2>",
                    unsafe_allow_html=True
                )
                
                # Plot Prediction
                st.subheader("ðŸ“Š Prediction Trend")
                fig, ax = plt.subplots(figsize=(12, 6))
                ax.plot(df_filtered.index, df_filtered['Close'], marker='o', linestyle='-', label='Actual')
                ax.plot(df_filtered.index, predicted_prices, marker='o', linestyle='dashed', label='Predicted')
                ax.set_xlabel("Date")
                ax.set_ylabel("Close Price")
                ax.legend()
                ax.grid()
                st.pyplot(fig)
                
                # Display Predicted Data
                st.subheader("ðŸ“Š Predicted Data")
                df_filtered['Predicted Close Price'] = predicted_prices
                st.dataframe(df_filtered[['Predicted Close Price']])
            except Exception as e:
                st.error(f"Error during prediction: {e}")